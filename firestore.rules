rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isInSameCouple(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      let currentUserDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.coupleId == currentUserDoc.data.coupleId;
    }

    function getUserCoupleId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.coupleId;
    }
    
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /couples/{coupleId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && (
        resource.data.partner1Id == request.auth.uid ||
        resource.data.partner2Id == request.auth.uid
      );
      // Allow querying by invitation code
      allow list: if request.auth != null;
    }
    
    match /date_plans/{planId} {
      allow list: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        isInSameCouple(resource.data.createdBy) ||
        resource.data.coupleId == getUserCoupleId()
      );
      allow get: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        isInSameCouple(resource.data.createdBy)
      );
    }
    
    match /dateWishes/{wishId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        isInSameCouple(resource.data.createdBy)
      );
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }
    
    match /quotes/{quoteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /budgets/{userId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || 
         isInSameCouple(userId));
      allow write: if isAuthenticated() && 
        request.auth.uid == userId;
    }
    
    match /calendar_events/{eventId} {
      allow read: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || 
         isInSameCouple(resource.data.createdBy));
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }
    
    match /invitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.creatorId == request.auth.uid;
    }

    match /calendars/{calendarId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         isInSameCouple(resource.data.userId));
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    match /shared_calendars/{coupleId} {
      allow read: if isAuthenticated() && getUserCoupleId() == coupleId;
      allow create: if isAuthenticated() && getUserCoupleId() == coupleId;
      allow update, delete: if isAuthenticated() && getUserCoupleId() == coupleId;
    }
  }
}