rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isInSameCouple(userId) {
      let coupleAsPartner1 = exists(/databases/$(database)/documents/couples/$(request.auth.uid));
      let coupleAsPartner2 = exists(/databases/$(database)/documents/couples/$(userId));
      return coupleAsPartner1 || coupleAsPartner2;
    }
    
    match /couples/{coupleId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.partner1Id == request.auth.uid || 
         resource.data.partner2Id == request.auth.uid);
      allow delete: if false;
    }
    
    match /date_wishes/{wishId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }
    
    match /dates/{planId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.plannerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.plannerId == request.auth.uid;
    }
    
    match /quotes/{quoteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /budgets/{userId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || 
         isInSameCouple(userId));
      allow write: if isAuthenticated() && 
        request.auth.uid == userId;
    }
    
    match /calendar_events/{eventId} {
      allow read: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || 
         isInSameCouple(resource.data.createdBy));
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }
    
    match /invitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.creatorId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.creatorId == request.auth.uid;
    }
  }
}